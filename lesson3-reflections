10th Feb. 2015

Caching your GitHub password in Git (see help.github.com):

git config --global credential.helper cache
# Set git to use the credential memory cache

After creating a new GitHub repository on GitHub called 'reflections':
git remote add origin git@github.com:forestacorn/reflections.git
git remote -v   # verbose info about GitHub repository.


11th Feb 2015

Q. When would you want to use a remote repository rather than keeping all your work
local?

A. a) To share development with others or to make the code available for others to have or work on.
   b) If I am using different computers at different locations and wish to work on the files at each location.


Q. Why might you want to always pull changes manually rather than having Git
automatically stay up-to-date with your remote repository?

A. Automatic updates may make undersired changes and result in numerous merge edits, a manual pull can be done when you are ready.


Q. Describe the differences between forks, clones, and branches.  When would you
use one instead of another?

Forks:  Done via the GitHub website to create a copy (fork) into your GitHub repository of a repository not owned by you.
Clones:  Clones, ie. copies, a remote repository to your local computer, so you do not have to be 'online' to edit.
Branches:  Either remotely or locally, to try somethng new without messing up the existing branch.


12 Feb 2015

git pull origin master   # is equivalent to...

git fetch origin   # +
git merge master origin/master


18th Feb 2015

Q. What is the benefit of having a copy of the last known state of the remote
stored locally?

A. To be aware of the effect that local changes will have on the remote.

## Pull Request example:
git branch different-oil    # create a new local branch
git checkout different-oil   # work on that branch
git add cake-recipe.txt     # then make changes to the local file
git commit -m 'oil change'   
git push origin different-oil   # send the changes to GitHub
# the changes may now be viewed on GitHub and acted upon.


Q. How would you collaborate without using Git or GitHub?  What would be easier,
and what would be harder?

A. Perhaps try discussion by email and possibly edit shared files - but this leads to contention over different ways of doing things.


Q. When would you want to make changes in a separate branch rather than directly in
master?  What benefits does each approach have?

A. I've got a little confused at this part of the course so may answer may not be correct or relevant, however:
Make changes in a separate branch to experiment or propose changes and in the master branch for 'normal' changes(?).
With the benefit of not having confusing changes in either branch(?).

    
